Eddroid.Main = function(game){
  this.map;
  this.mapjson;
  this.player;
  this.cursors;
  this.blockedLayer;
  this.music;
  this.bullet;
  this.bulletTime = 0;
  this.fireButton;
  this.addA;
  this.addS;
  this.addW;
  this.addD;
  this.playerDirection;


};
Eddroid.Main.prototype = {

  preload: function() {

  },



  create: function(){


    this.playerDirection = 0;
    point = new Phaser.Point(0, 0);

    this.world.setBounds(0,0,4800,4800);
    this.physics.startSystem(Phaser.Physics.ARCADE);
    map = this.add.sprite(0, 0, 'map');

    this.player = this.add.sprite(point.x, point.y, 'Eddroid');
    this.rubies = []
    this.nextShotAt = 0;
    this.shotDelay = 100;


    //  game.add.tween(player).to({ x: game.width }, 10000, Phaser.Easing.Linear.None, true);

    this.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.player.body.drag.set(100);
    this.player.body.maxVelocity.set(200);
    cursors = this.input.keyboard.createCursorKeys();
    addA = this.input.keyboard.addKey(Phaser.Keyboard.A)
    addS = this.input.keyboard.addKey(Phaser.Keyboard.S)
    addW = this.input.keyboard.addKey(Phaser.Keyboard.W)
    addD = this.input.keyboard.addKey(Phaser.Keyboard.D)
    this.fireButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR)


    this.camera.follow(this.player, Phaser.Camera.FOLLOW_TOPDOWN);
    this.player.body.collideWorldBounds = true;
    this.player.animations.add('walk-down',[0,1,2,3,4,5,6,7]);
    this.player.animations.add('walk-up',[10,11,12,13,14,15,16]);
    this.player.animations.add('walk-right',[20,21,22,23,24]);
    this.player.animations.add('walk-left',[26,27,28,29,30]);
    // player.animations.add('walk-up',[32,33,34,35,36]); sprite.animations.add('walk-down',[16,17,18,19,20]);
    // hero.animations.add('walkleft', [9,10,11,12,13,14,15,16,17]);
    // player.animations.add('south.walk', [0, 1, 2, 3, 4, 5, 6, 7]);
    // hero.animations.add('walkright', [27,28,29,30,31,32,33,34,35]);



    // bullets = this.add.group();
    // bullets.enableBody = true;
    // bullets.physicsBodyType = Phaser.Physics.ARCADE;
    // bullets.createMultiple(999, 'bullet')
    // bullets.setAll('anchor.x', 0);
    // bullets.setAll('anchor.y', 1);
    // bullets.setAll('outofBoundsKill', true);
    // bullets.setAll('checkWorldBounds', true);

  },


  update:function() {

    this.player.body.velocity.x = 0;
    this.player.body.velocity.y = 0;

        console.log(this.player.body);

    if (cursors.left.isDown || addA.isDown)
    {
      this.player.animations.play('walk-left');
      this.player.body.velocity.x = -200;
      this.playerDirection = 270;

    }
    else if (cursors.right.isDown || addD.isDown)
    {
      this.player.animations.play('walk-right');
      this.player.body.velocity.x = 200;
      this.playerDirection = 90;
    }

    if (cursors.up.isDown || addW.isDown)
    {
      this.player.animations.play('walk-up');
      this.player.body.velocity.y = -200;
      this.playerDirection = 180;
    }
    else if (cursors.down.isDown || addS.isDown)
    {
      this.player.animations.play('walk-down');
      this.player.body.velocity.y = 200;
      this.playerDirection = 0;
    }

    if(this.fireButton.isDown)
    {
      this.fire();
    }

  },



  fire:function() {
    if (this.nextShotAt > this.time.now) {
      return;
    }

    this.nextShotAt = this.time.now + this.shotDelay;


    var ruby = this.add.sprite(this.player.x, this.player.y - 20, 'ruby');
    ruby.anchor.setTo(1, -2);
    this.physics.enable(ruby, Phaser.Physics.ARCADE);
    if (this.playerDirection === 90 || this.playerDirection === 270) {
      ruby.body.velocity.x = this.playerDirection === 90 ? 500 : -500
    } else {
      ruby.body.velocity.y = this.playerDirection === 0 ? 500 : -500
    }
    this.rubies.push(ruby);


  },

};
