Eddroid.Main = function(game){
  this.map;
  this.mapjson;
  this.player;
  this.cursors;
  this.blockedLayer;
  playMusic = true,
  this.music;
  this.bullet;
  this.bulletTime = 0;
  this.fireButton;
  this.addA;
  this.addS;
  this.addW;
  this.addD;
  this.playerDirection;
  this.enemies;
  this.rubies;
  this.ruby;

};
Eddroid.Main.prototype = {

  preload: function() {

  },





  create: function(){


    this.playerDirection = 0;
    point = new Phaser.Point(0, 0);

    this.world.setBounds(0,0,4800,4800);
    this.physics.startSystem(Phaser.Physics.ARCADE);
    map = this.add.sprite(0, 0, 'map');

    this.player = this.add.sprite(point.x, point.y, 'Eddroid');

    rubies = this.add.group();
    rubies.enableBody = true;
    rubies.physicsBodyType = Phaser.Physics.ARCADE;
    this.nextShotAt = 0;
    this.shotDelay = 100;

    this.fire();


    //  game.add.tween(player).to({ x: game.width }, 10000, Phaser.Easing.Linear.None, true);

    this.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.player.body.drag.set(100);
    this.player.body.maxVelocity.set(200);
    cursors = this.input.keyboard.createCursorKeys();
    addA = this.input.keyboard.addKey(Phaser.Keyboard.A)
    addS = this.input.keyboard.addKey(Phaser.Keyboard.S)
    addW = this.input.keyboard.addKey(Phaser.Keyboard.W)
    addD = this.input.keyboard.addKey(Phaser.Keyboard.D)
    this.fireButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR)


    this.camera.follow(this.player, Phaser.Camera.FOLLOW_TOPDOWN);
    this.player.body.collideWorldBounds = true;
    this.player.animations.add('walk-down',[0,1,2,3,4,5,6,7]);
    this.player.animations.add('walk-up',[10,11,12,13,14,15,16]);
    this.player.animations.add('walk-right',[20,21,22,23,24]);
    this.player.animations.add('walk-left',[26,27,28,29,30]);


   enemies = this.add.group();
   enemies.enableBody = true;
   enemies.physicsBodyType = Phaser.Physics.ARCADE;


   this.createEnemies();


  },


  update:function() {

    this.physics.arcade.collide(rubies, enemies, this.collisionHandler, null, this);

    this.player.body.velocity.x = 0;
    this.player.body.velocity.y = 0;
    this.player.animations.getAnimation('walk-left').delay = 50;
    this.player.animations.getAnimation('walk-right').delay = 50;
    this.player.animations.getAnimation('walk-up').delay = 50;
    this.player.animations.getAnimation('walk-down').delay = 50;

    if (cursors.left.isDown || addA.isDown)
    {
      this.player.animations.play('walk-left');
      this.player.body.velocity.x = -200;
      this.playerDirection = 270;

    }
    else if (cursors.right.isDown || addD.isDown)
    {
      this.player.animations.play('walk-right');
      this.player.body.velocity.x = 200;
      this.playerDirection = 90;
    }

    if (cursors.up.isDown || addW.isDown)
    {
      this.player.animations.play('walk-up');
      this.player.body.velocity.y = -200;
      this.playerDirection = 180;
    }
    else if (cursors.down.isDown || addS.isDown)
    {
      this.player.animations.play('walk-down');
      this.player.body.velocity.y = 200;
      this.playerDirection = 0;
    }

    if (cursors.down.isDown && cursors.right.isDown)
    {
      this.player.animations.play('walk-right');
      this.player.body.velocity.x = 400;
      this.playerDirection = 90;
    }

    if (cursors.down.isDown && cursors.left.isDown)
    {
      this.player.animations.play('walk-left');
      this.player.body.velocity.x = -400;
      this.playerDirection = 90;
    }

    if (cursors.up.isDown && cursors.right.isDown)
    {
      this.player.animations.play('walk-right');
      this.player.body.velocity.x = 400;
      this.playerDirection = 90;
    }

    if (cursors.up.isDown && cursors.left.isDown)
    {
      this.player.animations.play('walk-left');
      this.player.body.velocity.x = -400;
      this.playerDirection = 90;
    }

    if(this.fireButton.isDown)
    {
      this.fire();
    }

  },



  fire:function() {
    if (this.nextShotAt > this.time.now) {
      return;
    }



    this.nextShotAt = this.time.now + this.shotDelay;


    var ruby = rubies.create(this.player.x, this.player.y - 20, 'ruby');
    this.physics.enable(ruby, Phaser.Physics.ARCADE);
    if (this.playerDirection === 90 || this.playerDirection === 270) {
      ruby.body.velocity.x = this.playerDirection === 90 ? 500 : -500
    } else {
      ruby.body.velocity.y = this.playerDirection === 0 ? 500 : -500
    }
    if (this.playerDirection === 90) {
      ruby.anchor.setTo(-2.62, -2.1);
    } else if (this.playerDirection === 270) {
      ruby.anchor.setTo(0.4 , -2.1);
    } else if (this.playerDirection === 180) {
      ruby.anchor.setTo(-1.8, -2);
    } else if (this.playerDirection === 0) {
      ruby.anchor.setTo(-0.3, -4);
    } else {
      ruby.anchor.setTo(0, 0);
    }
    // this.rubies.push(ruby);


  },

  createEnemies: function(){
   for(var y = 0; y < 4; y++){
     for(var x = 0; x < 10; x++){
       var enemy = enemies.create(x*48, y*50, 'enemy');
       enemy.anchor.setTo(0.5,0.5);
     }
   }
   enemies.x = 100;
   enemies.y = 50;

   var tween = this.add.tween(enemies).to({ x: 200 }, 2000, Phaser.Easing.Linear.None, true,0,1000,true);

 },


 descend: function(){
   enemies.y += 100;
 },

 collisionHandler: function(ruby, enemy) {
   ruby.kill();
   enemy.kill();
 }


};
